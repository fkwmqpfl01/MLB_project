# -*- coding: utf-8 -*-
"""project_MLB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZCHRaXtw63-QSTyyz3XLmW4ROx6yWXHd
"""

import os
from google.colab import userdata

os.environ["KAGGLE_USERNAME"] = ###
os.environ["KAGGLE_KEY"] = ###

!pip install -q -U keras-nlp
!pip install -q -U keras>=3

import keras
import keras_nlp

import os
os.environ["KERAS_BACKEND"] = "jax"  # Or "tensorflow" or "torch".

gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset("gemma_2b_en")
gemma_lm.summary()

gemma_lm.generate("What is the meaning of life?", max_length=64)

from google.colab import drive
drive.mount('/content/drive')

import os
import pandas as pd
import keras
import keras_nlp
from geopy.distance import geodesic

# Kaggle 연동
os.environ["KAGGLE_USERNAME"] = ###
os.environ["KAGGLE_KEY"] = ###

# 필요한 라이브러리 설치
#!pip install -q -U keras-nlp
#!pip install -q -U keras>=3
# !pip install -q -U geopy

# Keras를 JAX 백엔드로 설정 (선택)
os.environ["KERAS_BACKEND"] = "jax"

# Gemma 모델 불러오기
# gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset("gemma_2b_en")
gemma_lm.summary()

# CSV 파일에서 전기차 충전소와 정류장 데이터를 읽어오는 함수
def load_data(ev_station_file, bus_stop_file):
    #ev_stations = pd.read_csv(ev_station_file, encoding= 'cp949')
    #bus_stops = pd.read_csv(bus_stop_file, encoding= 'cp949')
    # return ev_stations, bus_stops
    return ev_station_file, bus_stop_file

# 특정 정류장과 가장 가까운 충전소 찾기
def find_nearest_station(bus_stop_name, ev_stations, bus_stops):
    # 정류장 찾기
    target_stop = bus_stops[bus_stops['정류장명'] == bus_stop_name]

    if target_stop.empty:
        return f"정류장 '{bus_stop_name}'을(를) 찾을 수 없습니다."
    # NaN 값 제거 및 '위도경도' 열을 문자열로 변환
    ev_stations = ev_stations.dropna(subset=['위도경도'])
    ev_stations['위도경도'] = ev_stations['위도경도'].astype(str)

    target_stop = target_stop.iloc[0]
    stop_coords = (target_stop['위도'], target_stop['경도'])

    # 가장 가까운 충전소 찾기
    nearest_station = None
    min_distance = float('inf')

    for _, station in ev_stations.iterrows():
        station_coords = tuple(map(float, station['위도경도'].split(',')))
        distance = geodesic(stop_coords, station_coords).kilometers

        if distance < min_distance:
            min_distance = distance
            nearest_station = station

    if nearest_station is not None:
        return f"가장 가까운 충전소는 '{nearest_station['충전소명']}'이며, 주소는 {nearest_station['주소']}입니다. 거리: {min_distance:.2f} km"
    else:
        return "가까운 충전소를 찾을 수 없습니다."

# 메인 프로그램
if __name__ == "__main__":
    # CSV 파일 경로
    ev_station_file = pd.read_csv('/content/drive/MyDrive/project_MLB/station.csv', encoding= 'cp949') # 전기차 충전소 데이터 파일
    bus_stop_file = pd.read_csv('/content/drive/MyDrive/project_MLB/bus_stop.csv', encoding= 'cp949')       # 정류장 데이터 파일
    print(type(ev_station_file))
    print(type(bus_stop_file))
    # 전기차 충전소와 정류장 데이터를 로드
    ev_stations, bus_stops = load_data(ev_station_file, bus_stop_file)

    # 사용자 입력 (정류장 이름)
    bus_stop_name = input("정류장 이름을 입력하세요: ")

    # 가장 가까운 충전소 찾기
    result = find_nearest_station(bus_stop_name, ev_stations, bus_stops)

    # 결과 출력
    print(result)

import os
import pandas as pd
import keras
import keras_nlp
from geopy.distance import geodesic

# Kaggle 연동
os.environ["KAGGLE_USERNAME"] = ###
os.environ["KAGGLE_KEY"] = ###

# Keras를 JAX 백엔드로 설정 (선택)
os.environ["KERAS_BACKEND"] = "jax"

# Gemma 모델 불러오기
# gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset("gemma_2b_en")

# CSV 파일에서 전기차 충전소와 정류장 데이터를 읽어오는 함수
def load_data(ev_station_file, bus_stop_file):
    return ev_station_file, bus_stop_file

# 규칙 기반으로 질문에서 정류장 이름 추출
def extract_bus_stop_name(user_input, bus_stops):
    # 정류장 리스트를 순회하며 입력된 질문에 정류장 이름이 포함되어 있는지 확인
    for stop_name in bus_stops['정류장명']:
        if stop_name in user_input:
            return stop_name
    return None

# 특정 정류장과 가장 가까운 충전소 찾기
def find_nearest_station(bus_stop_name, ev_stations, bus_stops):
    # 정류장 찾기
    target_stop = bus_stops[bus_stops['정류장명'] == bus_stop_name]

    if target_stop.empty:
        return f"정류장 '{bus_stop_name}'을(를) 찾을 수 없습니다."

    # NaN 값 제거 및 '위도경도' 열을 문자열로 변환
    ev_stations = ev_stations.dropna(subset=['위도경도'])
    ev_stations['위도경도'] = ev_stations['위도경도'].astype(str)

    target_stop = target_stop.iloc[0]
    stop_coords = (target_stop['위도'], target_stop['경도'])

    # 가장 가까운 충전소 찾기
    nearest_station = None
    min_distance = float('inf')

    for _, station in ev_stations.iterrows():
        station_coords = tuple(map(float, station['위도경도'].split(',')))
        distance = geodesic(stop_coords, station_coords).kilometers

        if distance < min_distance:
            min_distance = distance
            nearest_station = station

    if nearest_station is not None:
        return f"가장 가까운 충전소는 '{nearest_station['충전소명']}'이며, 주소는 {nearest_station['주소']}입니다. 거리: {min_distance:.2f} km"
    else:
        return "가까운 충전소를 찾을 수 없습니다."

# 메인 프로그램
if __name__ == "__main__":
    # CSV 파일 경로 (실제 파일 경로에 맞게 수정)
    ev_station_file = pd.read_csv('/content/drive/MyDrive/project_MLB/station.csv', encoding='cp949')  # 전기차 충전소 데이터 파일
    bus_stop_file = pd.read_csv('/content/drive/MyDrive/project_MLB/bus_stop.csv', encoding='cp949')   # 정류장 데이터 파일

    # 전기차 충전소와 정류장 데이터를 로드
    ev_stations, bus_stops = load_data(ev_station_file, bus_stop_file)

    # 사용자 입력 (자연어 처리)
    user_input = input("근처 정류장 이름을 포함해 위치를 입력하세요: ")

    # 규칙 기반으로 정류장 이름 추출
    bus_stop_name = extract_bus_stop_name(user_input, bus_stops)

    if bus_stop_name is None:
        print("질문에서 정류장 이름을 찾을 수 없습니다.")
    else:
        # 가장 가까운 충전소 찾기
        result = find_nearest_station(bus_stop_name, ev_stations, bus_stops)

        # 결과 출력
        print(result)

import os
import pandas as pd
import keras
import keras_nlp
from geopy.distance import geodesic

# Kaggle 연동
os.environ["KAGGLE_USERNAME"] = ###
os.environ["KAGGLE_KEY"] = ###

# Keras를 JAX 백엔드로 설정 (선택 사항)
os.environ["KERAS_BACKEND"] = "jax"

# Gemma 모델 불러오기
# gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset("gemma_2b_en")

# CSV 파일에서 전기차 충전소와 정류장 데이터를 읽어오는 함수
def load_data(ev_station_file, bus_stop_file):
    return ev_station_file, bus_stop_file

# Gemma 모델을 이용해 정류장 이름 추출
def extract_bus_stop_name(user_input):
    # 한글 프롬프트 생성
    prompt = f"{user_input}"

    # Gemma 모델을 사용해 자연어에서 필요한 정보를 추출
    response = gemma_lm.generate(prompt, max_length=30)

    # 응답에서 정류장 이름을 추출 (프롬프트 내용을 제외)
    bus_stop_name = response
    bus_stop_index = bus_stop_name.find("정류장")

    if bus_stop_index != -1:
        bus_stop_name = bus_stop_name[:bus_stop_index].strip()  # '정류장' 이전의 내용
    else:
        bus_stop_name = None  # '정류장'이 없으면 None

    return bus_stop_name

# 특정 정류장과 가장 가까운 충전소 찾기
def find_nearest_station(bus_stop_name, ev_stations, bus_stops):
    # 정류장 찾기
    target_stop = bus_stops[bus_stops['정류장명'] == bus_stop_name]

    if target_stop.empty:
        return f"정류장 '{bus_stop_name}'을(를) 찾을 수 없습니다."

    # NaN 값 제거 및 '위도경도' 열을 문자열로 변환
    ev_stations = ev_stations.dropna(subset=['위도경도'])
    ev_stations['위도경도'] = ev_stations['위도경도'].astype(str)

    target_stop = target_stop.iloc[0]
    stop_coords = (target_stop['위도'], target_stop['경도'])

    # 가장 가까운 충전소 찾기
    nearest_station = None
    min_distance = float('inf')

    for _, station in ev_stations.iterrows():
        station_coords = tuple(map(float, station['위도경도'].split(',')))
        distance = geodesic(stop_coords, station_coords).kilometers

        if distance < min_distance:
            min_distance = distance
            nearest_station = station

    if nearest_station is not None:
        return f"가장 가까운 충전소는 '{nearest_station['충전소명']}'이며, 주소는 {nearest_station['주소']}입니다. 거리: {min_distance:.2f} km"
    else:
        return "가까운 충전소를 찾을 수 없습니다."

# 메인 프로그램
if __name__ == "__main__":
    # CSV 파일 경로 (실제 파일 경로에 맞게 수정)
    ev_station_file = pd.read_csv('/content/drive/MyDrive/project_MLB/station.csv', encoding='cp949')  # 전기차 충전소 데이터 파일
    bus_stop_file = pd.read_csv('/content/drive/MyDrive/project_MLB/bus_stop.csv', encoding='cp949')   # 정류장 데이터 파일

    # 전기차 충전소와 정류장 데이터를 로드
    ev_stations, bus_stops = load_data(ev_station_file, bus_stop_file)

    # 사용자 입력 (자연어 처리)
    user_input = input("근처 정류장 이름을 포함해 위치를 입력하세요: ")

    # Gemma를 사용해 정류장 이름 추출
    bus_stop_name = extract_bus_stop_name(user_input)

    if not bus_stop_name:
        print("질문에서 정류장 이름을 찾을 수 없습니다.")
    else:
        # 가장 가까운 충전소 찾기
        result = find_nearest_station(bus_stop_name, ev_stations, bus_stops)

        # 결과 출력
        print(result)